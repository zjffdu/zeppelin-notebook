{
  "paragraphs": [
    {
      "text": "%md\n\nThis example will show how to use [built-in date and time functions](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/functions/systemFunctions.html#temporal-functions) to manipulate temporal fields.\n\nThe source table (`subscriptions`) is backed by the [`faker` connector](https://github.com/knaufk/flink-faker), which continuously generates rows in memory based on Java Faker expressions.\n\n#### Date and Time Functions\n\nWorking with dates and timestamps is commonplace in SQL, but your input may come in different types, formats or even timezones. Flink SQL has multiple built-in functions that are useful to deal with this kind of situation and make it convenient to handle temporal fields.\n\nAssume you have a table with service subscriptions and that you want to continuously [filter](../../foundations/04/04_where.md) these subscriptions to find the ones that have associated payment methods expiring in less than 30 days. The `start_date` and `end_date` are [Unix timestamps](https://en.wikipedia.org/wiki/Unix_time) (i.e. epochs) — which are not very human-readable and should be converted. Also, you want to parse the `payment_expiration` timestamp into its corresponding day, month and year parts. What are some functions that would be useful?\n\n* `TO_TIMESTAMP(string[, format])`: converts a `STRING` value to a `TIMESTAMP` using the specified format (default: \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\n* `FROM_UNIXTIME(numeric[, string])`: converts an epoch to a formatted `STRING` (default: \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\n* `DATE_FORMAT(timestamp, string)`: converts a `TIMESTAMP` to a `STRING` using the specified format\n\n* `EXTRACT(timeintervalunit FROM temporal)`: returns a `LONG` extracted from the specified date part of a temporal field (e.g. `DAY`,`MONTH`,`YEAR`)\n\n* `TIMESTAMPDIFF(unit, timepoint1, timepoint2)`: returns the number of time units (`SECOND`, `MINUTE`, `HOUR`, `DAY`, `MONTH` or `YEAR`) between `timepoint1` and `timepoint2`\n\n* `CURRENT_TIMESTAMP`: returns the current SQL timestamp (UTC)\n\nFor a complete list of built-in date and time functions, check the Flink [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/functions/systemFunctions.html#temporal-functions).\n\n\u003e As an exercise, you can try to reproduce the same filtering condition using `TIMESTAMPADD` instead.\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-03-18 16:01:23.158",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThis example will show how to use \u003ca href\u003d\"https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/functions/systemFunctions.html#temporal-functions\"\u003ebuilt-in date and time functions\u003c/a\u003e to manipulate temporal fields.\u003c/p\u003e\n\u003cp\u003eThe source table (\u003ccode\u003esubscriptions\u003c/code\u003e) is backed by the \u003ca href\u003d\"https://github.com/knaufk/flink-faker\"\u003e\u003ccode\u003efaker\u003c/code\u003e connector\u003c/a\u003e, which continuously generates rows in memory based on Java Faker expressions.\u003c/p\u003e\n\u003ch4\u003eDate and Time Functions\u003c/h4\u003e\n\u003cp\u003eWorking with dates and timestamps is commonplace in SQL, but your input may come in different types, formats or even timezones. Flink SQL has multiple built-in functions that are useful to deal with this kind of situation and make it convenient to handle temporal fields.\u003c/p\u003e\n\u003cp\u003eAssume you have a table with service subscriptions and that you want to continuously \u003ca href\u003d\"../../foundations/04/04_where.md\"\u003efilter\u003c/a\u003e these subscriptions to find the ones that have associated payment methods expiring in less than 30 days. The \u003ccode\u003estart_date\u003c/code\u003e and \u003ccode\u003eend_date\u003c/code\u003e are \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix timestamps\u003c/a\u003e (i.e. epochs) — which are not very human-readable and should be converted. Also, you want to parse the \u003ccode\u003epayment_expiration\u003c/code\u003e timestamp into its corresponding day, month and year parts. What are some functions that would be useful?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTO_TIMESTAMP(string[, format])\u003c/code\u003e: converts a \u003ccode\u003eSTRING\u003c/code\u003e value to a \u003ccode\u003eTIMESTAMP\u003c/code\u003e using the specified format (default: \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eFROM_UNIXTIME(numeric[, string])\u003c/code\u003e: converts an epoch to a formatted \u003ccode\u003eSTRING\u003c/code\u003e (default: \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eDATE_FORMAT(timestamp, string)\u003c/code\u003e: converts a \u003ccode\u003eTIMESTAMP\u003c/code\u003e to a \u003ccode\u003eSTRING\u003c/code\u003e using the specified format\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eEXTRACT(timeintervalunit FROM temporal)\u003c/code\u003e: returns a \u003ccode\u003eLONG\u003c/code\u003e extracted from the specified date part of a temporal field (e.g. \u003ccode\u003eDAY\u003c/code\u003e,\u003ccode\u003eMONTH\u003c/code\u003e,\u003ccode\u003eYEAR\u003c/code\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTIMESTAMPDIFF(unit, timepoint1, timepoint2)\u003c/code\u003e: returns the number of time units (\u003ccode\u003eSECOND\u003c/code\u003e, \u003ccode\u003eMINUTE\u003c/code\u003e, \u003ccode\u003eHOUR\u003c/code\u003e, \u003ccode\u003eDAY\u003c/code\u003e, \u003ccode\u003eMONTH\u003c/code\u003e or \u003ccode\u003eYEAR\u003c/code\u003e) between \u003ccode\u003etimepoint1\u003c/code\u003e and \u003ccode\u003etimepoint2\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eCURRENT_TIMESTAMP\u003c/code\u003e: returns the current SQL timestamp (UTC)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor a complete list of built-in date and time functions, check the Flink \u003ca href\u003d\"https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/functions/systemFunctions.html#temporal-functions\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAs an exercise, you can try to reproduce the same filtering condition using \u003ccode\u003eTIMESTAMPADD\u003c/code\u003e instead.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614317029726_1375528643",
      "id": "paragraph_1614317029726_1375528643",
      "dateCreated": "2021-02-26 13:23:49.726",
      "dateStarted": "2021-03-18 16:01:23.157",
      "dateFinished": "2021-03-18 16:01:23.181",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n本例将展示如何使用 [built-in date and time functions](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/functions/systemFunctions.html#temporal-functions) 来操作临时字段。\n\n数据源 `subscriptions` 表使用 [`faker` connector](https://github.com/knaufk/flink-faker) 提供数据，它可以基于 Java Faker 表达式持续的在内存中生成数据。\n\n#### 日期和时间函数\n\n在 SQL 中处理日期和时间是很常见的，但是你的输入可能来自不同的类型、格式甚至时区。Flink SQL 内置了很多函数用来处理这个问题并使得操作临时字段很简单。\n\n假设你有一个服务订阅的表，然后你希望不断的从中筛选出哪些关联的支付方式将在30天内过期的订阅。 `start_date` 和 `end_date` 是 [Unix timestamps](https://en.wikipedia.org/wiki/Unix_time) (例如 epochs) —这种格式对人类不友好，需要转换一下. 另外，你希望将`payment_expiration` 时间戳解析为对应的年、月、日。有哪些函数可以使用呢？\n\n* `TO_TIMESTAMP(string[, format])`: 使用指定格式(默认: \u0027yyyy-MM-dd HH:mm:ss\u0027)将 `STRING` 值转化为  `TIMESTAMP` \n\n* `FROM_UNIXTIME(numeric[, string])`: 将 epoch 格式化为 `STRING` (默认: \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\n* `DATE_FORMAT(timestamp, string)`:  使用指定格式将 `TIMESTAMP` 值转化为  `STRING` \n\n* `EXTRACT(timeintervalunit FROM temporal)`: 从某个临时字段的指定日期部分抽取返回  `LONG`\n\n* `TIMESTAMPDIFF(unit, timepoint1, timepoint2)`: 返回 `timepoint1` 与 `timepoint2` 之间的 时间单元数量\n\n* `CURRENT_TIMESTAMP`: returns the current SQL timestamp (UTC) 返回当前的 SQL 时间戳 (UTC)",
      "user": "anonymous",
      "dateUpdated": "2021-03-18 16:01:25.783",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e本例将展示如何使用 \u003ca href\u003d\"https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/functions/systemFunctions.html#temporal-functions\"\u003ebuilt-in date and time functions\u003c/a\u003e 来操作临时字段。\u003c/p\u003e\n\u003cp\u003e数据源 \u003ccode\u003esubscriptions\u003c/code\u003e 表使用 \u003ca href\u003d\"https://github.com/knaufk/flink-faker\"\u003e\u003ccode\u003efaker\u003c/code\u003e connector\u003c/a\u003e 提供数据，它可以基于 Java Faker 表达式持续的在内存中生成数据。\u003c/p\u003e\n\u003ch4\u003e日期和时间函数\u003c/h4\u003e\n\u003cp\u003e在 SQL 中处理日期和时间是很常见的，但是你的输入可能来自不同的类型、格式甚至时区。Flink SQL 内置了很多函数用来处理这个问题并使得操作临时字段很简单。\u003c/p\u003e\n\u003cp\u003e假设你有一个服务订阅的表，然后你希望不断的从中筛选出哪些关联的支付方式将在30天内过期的订阅。 \u003ccode\u003estart_date\u003c/code\u003e 和 \u003ccode\u003eend_date\u003c/code\u003e 是 \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix timestamps\u003c/a\u003e (例如 epochs) —这种格式对人类不友好，需要转换一下. 另外，你希望将\u003ccode\u003epayment_expiration\u003c/code\u003e 时间戳解析为对应的年、月、日。有哪些函数可以使用呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTO_TIMESTAMP(string[, format])\u003c/code\u003e: 使用指定格式(默认: \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;)将 \u003ccode\u003eSTRING\u003c/code\u003e 值转化为  \u003ccode\u003eTIMESTAMP\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eFROM_UNIXTIME(numeric[, string])\u003c/code\u003e: 将 epoch 格式化为 \u003ccode\u003eSTRING\u003c/code\u003e (默认: \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eDATE_FORMAT(timestamp, string)\u003c/code\u003e:  使用指定格式将 \u003ccode\u003eTIMESTAMP\u003c/code\u003e 值转化为  \u003ccode\u003eSTRING\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eEXTRACT(timeintervalunit FROM temporal)\u003c/code\u003e: 从某个临时字段的指定日期部分抽取返回  \u003ccode\u003eLONG\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTIMESTAMPDIFF(unit, timepoint1, timepoint2)\u003c/code\u003e: 返回 \u003ccode\u003etimepoint1\u003c/code\u003e 与 \u003ccode\u003etimepoint2\u003c/code\u003e 之间的 时间单元数量\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eCURRENT_TIMESTAMP\u003c/code\u003e: returns the current SQL timestamp (UTC) 返回当前的 SQL 时间戳 (UTC)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615537868232_1897098036",
      "id": "paragraph_1615537868232_1897098036",
      "dateCreated": "2021-03-12 08:31:08.232",
      "dateStarted": "2021-03-18 16:01:25.783",
      "dateFinished": "2021-03-18 16:01:25.802",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ssql(type\u003dupdate)\n\nDROP TABLE IF EXISTS subscriptions;\n\nCREATE TABLE subscriptions ( \n    id STRING,\n    start_date INT,\n    end_date INT,\n    payment_expiration TIMESTAMP(3)\n) WITH (\n  \u0027connector\u0027 \u003d \u0027faker\u0027,\n  \u0027fields.id.expression\u0027 \u003d \u0027#{Internet.uuid}\u0027, \n  \u0027fields.start_date.expression\u0027 \u003d \u0027#{number.numberBetween \u0027\u00271576141834\u0027\u0027,\u0027\u00271607764234\u0027\u0027}\u0027,\n  \u0027fields.end_date.expression\u0027 \u003d \u0027#{number.numberBetween \u0027\u00271609060234\u0027\u0027,\u0027\u00271639300234\u0027\u0027}\u0027,\n  \u0027fields.payment_expiration.expression\u0027 \u003d \u0027#{date.future \u0027\u0027365\u0027\u0027,\u0027\u0027DAYS\u0027\u0027}\u0027\n);\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 10:17:36.350",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614305834031_217311768",
      "id": "paragraph_1614305834031_217311768",
      "dateCreated": "2021-02-26 10:17:14.031",
      "dateStarted": "2021-02-26 10:17:36.360",
      "dateFinished": "2021-02-26 10:17:37.206",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ssql(type\u003dupdate)\n\nSELECT \n  id,\n  TO_TIMESTAMP(FROM_UNIXTIME(start_date)) AS start_date,\n  TO_TIMESTAMP(FROM_UNIXTIME(end_date)) AS end_date,\n  DATE_FORMAT(payment_expiration,\u0027YYYYww\u0027) AS exp_yweek,\n  EXTRACT(DAY FROM payment_expiration) AS exp_day,     --same as DAYOFMONTH(ts)\n  EXTRACT(MONTH FROM payment_expiration) AS exp_month, --same as MONTH(ts)\n  EXTRACT(YEAR FROM payment_expiration) AS exp_year    --same as YEAR(ts)\nFROM subscriptions\nWHERE \n  TIMESTAMPDIFF(DAY,CURRENT_TIMESTAMP,payment_expiration) \u003c 30\nORDER BY start_date DESC\nLIMIT 10;\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 13:23:49.010",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "start_date": "string",
                      "end_date": "string",
                      "exp_yweek": "string",
                      "exp_day": "string",
                      "exp_month": "string",
                      "exp_year": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "FLINK JOB",
          "tooltip": "View in Flink web UI",
          "group": "flink",
          "values": [
            {
              "jobUrl": "http://localhost:8081#/job/d42017645cd10393a87c40bc8412cf06"
            }
          ],
          "interpreterSettingId": "flink"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614305846680_805424590",
      "id": "paragraph_1614305846680_805424590",
      "dateCreated": "2021-02-26 10:17:26.680",
      "dateStarted": "2021-02-26 10:18:22.682",
      "dateFinished": "2021-02-26 10:18:40.880",
      "status": "ABORT"
    },
    {
      "text": "%flink.ssql\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 10:17:47.535",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614305867535_146646646",
      "id": "paragraph_1614305867535_146646646",
      "dateCreated": "2021-02-26 10:17:47.535",
      "status": "READY"
    }
  ],
  "name": "01 Working with Dates and Timestamps",
  "id": "2G1WY9HY2",
  "defaultInterpreterGroup": "flink",
  "version": "0.10.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}